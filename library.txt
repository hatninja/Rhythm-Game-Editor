--[[
This was basically a design document, many things are different now. I will turn this into documentation later.
]]

The library for custom games to use.

--Example data.lon 
{
	name = "Cheer Readers", --Your game name!
	
	nodes = {
		[1] = {
			icon = "icon.png", --Helpful icon for editors
			color = "#FFFFFF", --Helpful color for editors
			
			button = 1 --Button number. Positive is pressed, negative is released.
			weight = 1 --Score of the node when executed perfectly.
			
			cues = {-1,-0.5}, --Adds cues at the specified count relative to this node.
			action = {1}
		}
	}
}



Callbacks: (handled by the game manager)

game.load() --Initialize all your stuff here.
game.reset() --Reset the scene, by default it'll be game.load

game.update(dt) --Updates every frame.


game.count(count, totalcount) --This calls for every 16th of a beat.
game.cue(index, node) --Activates on passing a cue. Index is the id for the cue, specified in data.lon. Node is the node the cue belongs to.


game.draw() --Put drawing code here.

game.press(button) --Callback for a button press. Inverted numbers mean button release.



game.hit(button, node, accuracy) - Callback for a correct on-time button press.
game.miss(button, node, accuracy) - Callback for when you miss a node entirely.

game.tag(marker) --May be a number for game-specific tags or a string for manager tags (such as tempo change or game change).

game.songfinish(percent) - Callback for when the song finishes. Return a message for playing.


New Functions:

math.interpolate(a,b,lambda)
A big help for making things move along the beat.

math.round(n, nearest)
math.wrap(n, max,min)
math.clamp(n, max,min)